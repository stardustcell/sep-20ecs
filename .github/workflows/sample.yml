name: Master Deployment

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
           
      - name: Determine branch name
        id: set-branch-name
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "BRANCH_NAME=master" >> $GITHUB_ENV
            else
            echo "Branch not permitted"
            exit 1
          fi
         
      - name: Build Docker image
        run: |
          docker build -t gitactions-ecs:${{ env.BRANCH_NAME }}-${{ github.run_number }} .
          docker tag gitactions-ecs:${{ env.BRANCH_NAME }}-${{ github.run_number }} 493854845415.dkr.ecr.us-east-1.amazonaws.com/project2024:${{ env.BRANCH_NAME }}-${{ github.run_number }}
    

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push Docker image to Amazon ECR
        run: |
          docker push 493854845415.dkr.ecr.us-east-1.amazonaws.com/project2024:${{ env.BRANCH_NAME }}-${{ github.run_number }}
      - name: Deploy to ECS
        run: |
             
             startECSDeploy() {
              # Command to create new td.
               sed -e "s;GIT_COMMIT;${IMAGE_VERSION};g" ${JSON_FILE}.json > ${JSON_FILE}-new-${{ github.run_number }}.json
               sed -e "s;task_role;${TASK_ROLE};g" ${JSON_FILE}-new-${{ github.run_number }}.json > ${JSON_FILE}-${{ github.run_number }}.json
               cat ${JSON_FILE}-${{ github.run_number }}.json

              aws ecs register-task-definition --family ${TASK_FAMILY} --cli-input-json file://${JSON_FILE}-${{ github.run_number }}.json --region us-east-2

             # Updating the service.
             TASK_REVISION=$(aws ecs describe-task-definition --task-definition ${TASK_FAMILY} --region us-east-2 --query "taskDefinition.revision" --output text)
             echo $TASK_REVISION
             DESIRED_COUNT=$(aws ecs describe-services --cluster ${CLUSTER} --services ${SERVICE_NAME} --region us-east-2 --query "services[0].desiredCount" --output text)
             echo $DESIRED_COUNT

             OLD_TASK_ID=$(aws ecs list-tasks --cluster ${CLUSTER} --desired-status RUNNING --family ${TASK_FAMILY} --region us-east-2 --query "taskArns[0]" --output text)
             echo $OLD_TASK_ID
            

             aws ecs update-service --cluster ${CLUSTER} --service ${SERVICE_NAME} --desired-count ${RUNNING_COUNT} --task-definition ${TASK_FAMILY}:${TASK_REVISION} --force-new-deployment --region us-east-2

             #Waiting for the service to be available in the cluster.
             aws ecs wait services-stable --cluster ${CLUSTER} --services ${SERVICE_NAME} --region us-east-2

             if [ $? -eq 0 ]; then
                echo "Build got deployed successfully"
             else
             echo "Build failed"
             exit 1
             fi
             rm -rf ${JSON_FILE}-${{ github.run_number }}.json
              }


             if [ "${{ github.ref }}" == "refs/heads/master" ]; then
             SERVICE_NAME="project-sc"
             IMAGE_VERSION="${{ env.BRANCH_NAME }}-${{ github.run_number }}"
             TASK_FAMILY="project-tf"
             CLUSTER="projectecs-2024"
             TASK_ROLE="ecsrole"
             JSON_FILE=".github/workflows/task-definition"
             RUNNING_COUNT=1
             startECSDeploy
             else
                  echo "Skip deployment"
             fi
